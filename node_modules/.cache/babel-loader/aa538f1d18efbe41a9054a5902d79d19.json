{"ast":null,"code":"import _slicedToArray from \"/Users/simoncolman/Desktop/react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/simoncolman/Desktop/react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/simoncolman/Desktop/react-app/src/utils/GlobalState.js\";\nimport React, { createContext, useReducer, useContext } from \"react\";\nconst TodoContext = createContext({\n  id: \"\",\n  name: \"\",\n  priority: false\n});\nconst Provider = TodoContext.Provider;\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"add\":\n      return [...state, {\n        id: state.length * Math.random(),\n        name: action.name\n      }];\n\n    case \"remove\":\n      return state.filter((_, index) => {\n        return index !== action.index;\n      });\n\n    case \"prioritize\":\n      return state.map((item, index) => {\n        if (index === action.index) {\n          return Object.assign({}, item, {\n            priority: !item.priority\n          });\n        }\n\n        return item;\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction TodoProvider(_ref) {\n  let _ref$value = _ref.value,\n      value = _ref$value === void 0 ? [] : _ref$value,\n      props = _objectWithoutProperties(_ref, [\"value\"]);\n\n  const _useReducer = useReducer(reducer, []),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1];\n\n  return React.createElement(Provider, Object.assign({\n    value: [state, dispatch]\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }));\n}\n\nfunction useTodoContext() {\n  return useContext(TodoContext);\n}\n\nexport { TodoProvider, useTodoContext };","map":{"version":3,"sources":["/Users/simoncolman/Desktop/react-app/src/utils/GlobalState.js"],"names":["React","createContext","useReducer","useContext","TodoContext","id","name","priority","Provider","reducer","state","action","type","length","Math","random","filter","_","index","map","item","Object","assign","TodoProvider","value","props","dispatch","useTodoContext"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,UAA3C,QAA6D,OAA7D;AAEA,MAAMC,WAAW,GAAGH,aAAa,CAAC;AAChCI,EAAAA,EAAE,EAAE,EAD4B;AAEhCC,EAAAA,IAAI,EAAE,EAF0B;AAGhCC,EAAAA,QAAQ,EAAE;AAHsB,CAAD,CAAjC;MAKQC,Q,GAAaJ,W,CAAbI,Q;;AAER,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAAgC;AAC9B,UAAQA,MAAM,CAACC,IAAf;AACA,SAAK,KAAL;AACE,aAAO,CACL,GAAGF,KADE,EAEL;AACEL,QAAAA,EAAE,EAAEK,KAAK,CAACG,MAAN,GAAeC,IAAI,CAACC,MAAL,EADrB;AAEET,QAAAA,IAAI,EAAEK,MAAM,CAACL;AAFf,OAFK,CAAP;;AAOF,SAAK,QAAL;AACE,aAAOI,KAAK,CAACM,MAAN,CAAa,CAACC,CAAD,EAAIC,KAAJ,KAAc;AAChC,eAAOA,KAAK,KAAKP,MAAM,CAACO,KAAxB;AACD,OAFM,CAAP;;AAGF,SAAK,YAAL;AACE,aAAOR,KAAK,CAACS,GAAN,CAAU,CAACC,IAAD,EAAOF,KAAP,KAAiB;AAChC,YAAIA,KAAK,KAAKP,MAAM,CAACO,KAArB,EAA4B;AAC1B,iBAAOG,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,IAAlB,EAAwB;AAC7Bb,YAAAA,QAAQ,EAAE,CAACa,IAAI,CAACb;AADa,WAAxB,CAAP;AAGD;;AACD,eAAOa,IAAP;AACD,OAPM,CAAP;;AAQF;AACE,aAAOV,KAAP;AAvBF;AAyBD;;AAED,SAASa,YAAT,OAAgD;AAAA,wBAAxBC,KAAwB;AAAA,MAAxBA,KAAwB,2BAAhB,EAAgB;AAAA,MAATC,KAAS;;AAAA,sBACpBvB,UAAU,CAACO,OAAD,EAAU,EAAV,CADU;AAAA;AAAA,QACvCC,KADuC;AAAA,QAChCgB,QADgC;;AAG9C,SAAO,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAE,CAAChB,KAAD,EAAQgB,QAAR;AAAjB,KAAwCD,KAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD;;AAED,SAASE,cAAT,GAA0B;AACxB,SAAOxB,UAAU,CAACC,WAAD,CAAjB;AACD;;AAED,SAASmB,YAAT,EAAuBI,cAAvB","sourcesContent":["import React, { createContext, useReducer, useContext } from \"react\";\n\nconst TodoContext = createContext({\n  id: \"\",\n  name: \"\",\n  priority: false\n});\nconst { Provider } = TodoContext;\n\nfunction reducer(state, action) {\n  switch (action.type) {\n  case \"add\":\n    return [\n      ...state,\n      {\n        id: state.length * Math.random(),\n        name: action.name\n      }\n    ];\n  case \"remove\":\n    return state.filter((_, index) => {\n      return index !== action.index;\n    });\n  case \"prioritize\":\n    return state.map((item, index) => {\n      if (index === action.index) {\n        return Object.assign({}, item, {\n          priority: !item.priority\n        });\n      }\n      return item;\n    });\n  default:\n    return state;\n  }\n}\n\nfunction TodoProvider({ value = [], ...props }) {\n  const [state, dispatch] = useReducer(reducer, []);\n\n  return <Provider value={[state, dispatch]} {...props} />;\n}\n\nfunction useTodoContext() {\n  return useContext(TodoContext);\n}\n\nexport { TodoProvider, useTodoContext };\n"]},"metadata":{},"sourceType":"module"}