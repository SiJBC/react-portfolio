{"ast":null,"code":"import _defineProperty from \"/Users/simoncolman/Desktop/coding_bootcamp/repositories/react-portfolio/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/simoncolman/Desktop/coding_bootcamp/repositories/react-portfolio/src/pages/Discover.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from \"react\";\nimport API from \"../utils/API\";\nimport Card from \"../components/Card\";\n\nclass Discover extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      image: \"\",\n      match: false,\n      matchCount: 0\n    };\n\n    this.handleBtnClick = event => {\n      // Get the data-value of the clicked button\n      const btnType = event.target.attributes.getNamedItem(\"data-value\").value; // Clone this.state to the newState object\n      // We'll modify this object and use it to set our component's state\n\n      const newState = _objectSpread({}, this.state);\n\n      if (btnType === \"pick\") {\n        // Set newState.match to either true or false depending on whether or not the dog likes us (1/5 chance)\n        newState.match = 1 === Math.floor(Math.random() * 5) + 1; // Set newState.matchCount equal to its current value or its current value + 1 depending on whether the dog likes us\n\n        newState.matchCount = newState.match ? newState.matchCount + 1 : newState.matchCount;\n      } else {\n        // If we thumbs down'ed the dog, we haven't matched with it\n        newState.match = false;\n      } // Replace our component's state with newState, load the next dog image\n\n\n      this.setState(newState);\n      this.loadNextDog();\n    };\n\n    this.loadNextDog = () => {\n      API.getRandomDog().then(res => this.setState({\n        image: res.data.message\n      })).catch(err => console.log(err));\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \"Make New Friends\"), React.createElement(\"h3\", {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \"Thumbs up on any pups you'd like to meet!\"), React.createElement(Card, {\n      image: this.state.image,\n      handleBtnClick: this.handleBtnClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Discover;","map":{"version":3,"sources":["/Users/simoncolman/Desktop/coding_bootcamp/repositories/react-portfolio/src/pages/Discover.js"],"names":["React","Component","API","Card","Discover","state","image","match","matchCount","handleBtnClick","event","btnType","target","attributes","getNamedItem","value","newState","Math","floor","random","setState","loadNextDog","getRandomDog","then","res","data","message","catch","err","console","log","render"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;;AAGA,MAAMC,QAAN,SAAuBH,SAAvB,CAAiC;AAAA;AAAA;AAAA,SAC/BI,KAD+B,GACvB;AACNC,MAAAA,KAAK,EAAE,EADD;AAENC,MAAAA,KAAK,EAAE,KAFD;AAGNC,MAAAA,UAAU,EAAE;AAHN,KADuB;;AAAA,SAU/BC,cAV+B,GAUdC,KAAK,IAAI;AACxB;AACA,YAAMC,OAAO,GAAGD,KAAK,CAACE,MAAN,CAAaC,UAAb,CAAwBC,YAAxB,CAAqC,YAArC,EAAmDC,KAAnE,CAFwB,CAGxB;AACA;;AACA,YAAMC,QAAQ,qBAAQ,KAAKX,KAAb,CAAd;;AAEA,UAAIM,OAAO,KAAK,MAAhB,EAAwB;AACtB;AACAK,QAAAA,QAAQ,CAACT,KAAT,GAAiB,MAAMU,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,IAAgC,CAAvD,CAFsB,CAItB;;AACAH,QAAAA,QAAQ,CAACR,UAAT,GAAsBQ,QAAQ,CAACT,KAAT,GAClBS,QAAQ,CAACR,UAAT,GAAsB,CADJ,GAElBQ,QAAQ,CAACR,UAFb;AAGD,OARD,MAQO;AACL;AACAQ,QAAAA,QAAQ,CAACT,KAAT,GAAiB,KAAjB;AACD,OAlBuB,CAmBxB;;;AACA,WAAKa,QAAL,CAAcJ,QAAd;AACA,WAAKK,WAAL;AACD,KAhC8B;;AAAA,SAkC/BA,WAlC+B,GAkCjB,MAAM;AAClBnB,MAAAA,GAAG,CAACoB,YAAJ,GACGC,IADH,CACQC,GAAG,IACP,KAAKJ,QAAL,CAAc;AACZd,QAAAA,KAAK,EAAEkB,GAAG,CAACC,IAAJ,CAASC;AADJ,OAAd,CAFJ,EAMGC,KANH,CAMSC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CANhB;AAOD,KA1C8B;AAAA;;AA4C/BG,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAI,MAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,EAEE;AAAI,MAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDAFF,EAKE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE,KAAK1B,KAAL,CAAWC,KAAxB;AAA+B,MAAA,cAAc,EAAE,KAAKG,cAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,CADF;AAUD;;AAvD8B;;AA0DjC,eAAeL,QAAf","sourcesContent":["import React, { Component } from \"react\";\nimport API from \"../utils/API\";\nimport Card from \"../components/Card\";\n\n\nclass Discover extends Component {\n  state = {\n    image: \"\",\n    match: false,\n    matchCount: 0\n  };\n\n  // When the component mounts, load the next dog to be displayed\n\n\n  handleBtnClick = event => {\n    // Get the data-value of the clicked button\n    const btnType = event.target.attributes.getNamedItem(\"data-value\").value;\n    // Clone this.state to the newState object\n    // We'll modify this object and use it to set our component's state\n    const newState = { ...this.state };\n\n    if (btnType === \"pick\") {\n      // Set newState.match to either true or false depending on whether or not the dog likes us (1/5 chance)\n      newState.match = 1 === Math.floor(Math.random() * 5) + 1;\n\n      // Set newState.matchCount equal to its current value or its current value + 1 depending on whether the dog likes us\n      newState.matchCount = newState.match\n        ? newState.matchCount + 1\n        : newState.matchCount;\n    } else {\n      // If we thumbs down'ed the dog, we haven't matched with it\n      newState.match = false;\n    }\n    // Replace our component's state with newState, load the next dog image\n    this.setState(newState);\n    this.loadNextDog();\n  };\n\n  loadNextDog = () => {\n    API.getRandomDog()\n      .then(res =>\n        this.setState({\n          image: res.data.message\n        })\n      )\n      .catch(err => console.log(err));\n  };\n\n  render() {\n    return (\n      <div>\n        <h1 className=\"text-center\">Make New Friends</h1>\n        <h3 className=\"text-center\">\n          Thumbs up on any pups you'd like to meet!\n        </h3>\n        <Card image={this.state.image} handleBtnClick={this.handleBtnClick} />\n\n      </div>\n    );\n  }\n}\n\nexport default Discover;\n"]},"metadata":{},"sourceType":"module"}