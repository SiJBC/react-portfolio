{"ast":null,"code":"import _slicedToArray from \"/Users/simoncolman/Desktop/react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/simoncolman/Desktop/react-app/src/components/UserCountryCases.js\";\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport Typography from \"@material-ui/core/Typography\";\nconst useStyles = makeStyles(theme => ({\n  cardContents: {\n    background: \"linear-gradient(to right, #ece9e6, #ffffff)\",\n    textAlign: \"center\"\n  },\n  textColor: {\n    color: \" #581845\"\n  }\n}));\n\nconst UserCountryCases = props => {\n  const theme = useTheme();\n  const matchesMD = useMediaQuery(theme.breakpoints.down(\"md\"));\n  const classes = useStyles();\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        countryData = _useState2[0],\n        setCountryData = _useState2[1];\n\n  const _useState3 = useState(\"\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        countryIn = _useState4[0],\n        setCountryIn = _useState4[1];\n\n  useEffect(() => {\n    const fetchUserLocationData = async () => {\n      let url = process.env.REACT_APP_PROD_API_URL;\n      let countryUrl = process.env.REACT_APP_PROD_API_URL_USER_COUNTRY;\n      let key = process.env.REACT_APP_SECRET_KEY;\n      const responseFromUserLocationData = await axios(\"\".concat(countryUrl).concat(key));\n      setCountryIn(responseFromUserLocationData.data.country_name);\n\n      if (countryIn.length > 2) {\n        const responseFromCorona = await axios(\"\".concat(url, \"countries\"));\n        const userLocationResult = responseFromCorona.data.map(data => data);\n        setCountryData(userLocationResult.filter(data => data.country === countryIn));\n\n        if (countryIn.includes(\"United States\")) {\n          setCountryData(userLocationResult.filter(data => data.country === \"USA\"));\n        }\n      }\n    };\n\n    fetchUserLocationData();\n  }, [countryIn]);\n\n  function colors(data) {\n    // eslint-disable-next-line no-unused-vars\n    let subjectColor = \"\";\n\n    if (data <= 30) {\n      return subjectColor = \"#58d68d\";\n    } else if (data > 30 && data < 80) {\n      return subjectColor = \"#FFC300\";\n    } else if (data > 80 && data < 130) {\n      return subjectColor = \"#FF5733\";\n    } else {\n      return subjectColor = \"#C70039\";\n    }\n  }\n\n  return React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(Card, {\n    className: classes.cardContents,\n    style: {\n      minWidth: \"20em\",\n      minHeight: \"20em\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(CardContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    className: classes.textColor,\n    variant: matchesMD ? \"h5\" : \"h3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \"Cases in \", countryIn), React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }), !countryData || countryData.length === 0 ? React.createElement(Typography, {\n    variant: \"h6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, \"Loading...\") : countryData.map((data, i) => {\n    return React.createElement(\"div\", {\n      key: i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      variant: matchesMD ? \"h6\" : \"h5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"Cases :\", \" \", React.createElement(\"span\", {\n      style: {\n        color: colors(data.cases),\n        fontWeight: \"bold\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, data.cases)), React.createElement(Typography, {\n      variant: matchesMD ? \"h6\" : \"h5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"Critical :\", \" \", React.createElement(\"span\", {\n      style: {\n        color: colors(data.critical),\n        fontWeight: \"bold\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, data.critical)), React.createElement(Typography, {\n      variant: matchesMD ? \"h6\" : \"h5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"Deaths :\", \" \", React.createElement(\"span\", {\n      style: {\n        color: colors(data.deaths),\n        fontWeight: \"bold\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, data.deaths)), React.createElement(Typography, {\n      variant: matchesMD ? \"h6\" : \"h5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"Recovered :\", \" \", React.createElement(\"span\", {\n      style: {\n        color: colors(data.recovered),\n        fontWeight: \"bold\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, data.recovered)), React.createElement(Typography, {\n      variant: matchesMD ? \"h6\" : \"h5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"Today's Cases :\", \" \", React.createElement(\"span\", {\n      style: {\n        color: colors(data.todayCases),\n        fontWeight: \"bold\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, data.todayCases)), React.createElement(Typography, {\n      variant: matchesMD ? \"h6\" : \"h5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"Today's Deaths :\", \" \", React.createElement(\"span\", {\n      style: {\n        color: colors(data.todayDeaths),\n        fontWeight: \"bold\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, data.todayDeaths)));\n  }))));\n};\n\nexport default UserCountryCases;","map":{"version":3,"sources":["/Users/simoncolman/Desktop/react-app/src/components/UserCountryCases.js"],"names":["React","useEffect","useState","axios","Grid","makeStyles","useTheme","Card","CardContent","useMediaQuery","Typography","useStyles","theme","cardContents","background","textAlign","textColor","color","UserCountryCases","props","matchesMD","breakpoints","down","classes","countryData","setCountryData","countryIn","setCountryIn","fetchUserLocationData","url","process","env","REACT_APP_PROD_API_URL","countryUrl","REACT_APP_PROD_API_URL_USER_COUNTRY","key","REACT_APP_SECRET_KEY","responseFromUserLocationData","data","country_name","length","responseFromCorona","userLocationResult","map","filter","country","includes","colors","subjectColor","minWidth","minHeight","i","cases","fontWeight","critical","deaths","recovered","todayCases","todayDeaths"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = makeStyles(theme => ({\n  cardContents: {\n    background: \"linear-gradient(to right, #ece9e6, #ffffff)\",\n    textAlign: \"center\"\n  },\n  textColor: {\n    color: \" #581845\"\n  }\n}));\nconst UserCountryCases = props => {\n  const theme = useTheme();\n  const matchesMD = useMediaQuery(theme.breakpoints.down(\"md\"));\n  const classes = useStyles();\n  const [countryData, setCountryData] = useState([]);\n  const [countryIn, setCountryIn] = useState(\"\");\n\n  useEffect(() => {\n    const fetchUserLocationData = async () => {\n      let url = process.env.REACT_APP_PROD_API_URL;\n      let countryUrl = process.env.REACT_APP_PROD_API_URL_USER_COUNTRY;\n      let key = process.env.REACT_APP_SECRET_KEY;\n      const responseFromUserLocationData = await axios(`${countryUrl}${key}`);\n      setCountryIn(responseFromUserLocationData.data.country_name);\n\n      if (countryIn.length > 2) {\n        const responseFromCorona = await axios(`${url}countries`);\n        const userLocationResult = responseFromCorona.data.map(data => data);\n        setCountryData(\n          userLocationResult.filter(data => data.country === countryIn)\n        );\n        if (countryIn.includes(\"United States\")) {\n          setCountryData(\n            userLocationResult.filter(data => data.country === \"USA\")\n          );\n        }\n      }\n    };\n    fetchUserLocationData();\n  }, [countryIn]);\n\n  function colors(data) {\n    // eslint-disable-next-line no-unused-vars\n    let subjectColor = \"\";\n    if (data <= 30) {\n      return (subjectColor = \"#58d68d\");\n    } else if (data > 30 && data < 80) {\n      return (subjectColor = \"#FFC300\");\n    } else if (data > 80 && data < 130) {\n      return (subjectColor = \"#FF5733\");\n    } else {\n      return (subjectColor = \"#C70039\");\n    }\n  }\n  return (\n    <Grid item>\n      <Card\n        className={classes.cardContents}\n        style={{ minWidth: \"20em\", minHeight: \"20em\" }}\n      >\n        <CardContent>\n          <Typography\n            className={classes.textColor}\n            variant={matchesMD ? \"h5\" : \"h3\"}\n          >\n            Cases in {countryIn}\n          </Typography>\n          <hr />\n          {!countryData || countryData.length === 0 ? (\n            <Typography variant=\"h6\">Loading...</Typography>\n          ) : (\n            countryData.map((data, i) => {\n              return (\n                <div key={i}>\n                  <Typography variant={matchesMD ? \"h6\" : \"h5\"}>\n                    Cases :{\" \"}\n                    <span\n                      style={{ color: colors(data.cases), fontWeight: \"bold\" }}\n                    >\n                      {data.cases}\n                    </span>\n                  </Typography>\n                  <Typography variant={matchesMD ? \"h6\" : \"h5\"}>\n                    Critical :{\" \"}\n                    <span\n                      style={{\n                        color: colors(data.critical),\n                        fontWeight: \"bold\"\n                      }}\n                    >\n                      {data.critical}\n                    </span>\n                  </Typography>\n                  <Typography variant={matchesMD ? \"h6\" : \"h5\"}>\n                    Deaths :{\" \"}\n                    <span\n                      style={{ color: colors(data.deaths), fontWeight: \"bold\" }}\n                    >\n                      {data.deaths}\n                    </span>\n                  </Typography>\n                  <Typography variant={matchesMD ? \"h6\" : \"h5\"}>\n                    Recovered :{\" \"}\n                    <span\n                      style={{\n                        color: colors(data.recovered),\n                        fontWeight: \"bold\"\n                      }}\n                    >\n                      {data.recovered}\n                    </span>\n                  </Typography>\n                  <Typography variant={matchesMD ? \"h6\" : \"h5\"}>\n                    Today's Cases :{\" \"}\n                    <span\n                      style={{\n                        color: colors(data.todayCases),\n                        fontWeight: \"bold\"\n                      }}\n                    >\n                      {data.todayCases}\n                    </span>\n                  </Typography>\n                  <Typography variant={matchesMD ? \"h6\" : \"h5\"}>\n                    Today's Deaths :{\" \"}\n                    <span\n                      style={{\n                        color: colors(data.todayDeaths),\n                        fontWeight: \"bold\"\n                      }}\n                    >\n                      {data.todayDeaths}\n                    </span>\n                  </Typography>\n                </div>\n              );\n            })\n          )}\n        </CardContent>\n      </Card>\n    </Grid>\n  );\n};\n\nexport default UserCountryCases;\n"]},"metadata":{},"sourceType":"module"}