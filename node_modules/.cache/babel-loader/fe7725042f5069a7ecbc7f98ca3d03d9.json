{"ast":null,"code":"import _slicedToArray from \"/Users/simoncolman/Desktop/react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/simoncolman/Desktop/react-app/src/components/InputSearch.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport axios from \"axios\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport { Typography } from \"@material-ui/core\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nconst useStyles = makeStyles(theme => ({\n  cardContents: {\n    background: \"linear-gradient(to right, #ece9e6, #ffffff)\",\n    textAlign: \"center\"\n  },\n  textColor: {\n    color: \" #581845\"\n  },\n  autoContainer: {\n    height: \"4.6em\",\n    [theme.breakpoints.down(\"md\")]: {\n      height: \"4em\",\n      marginLeft: \"0.5em\",\n      marginRight: \"0.5em\"\n    },\n    backgroundColor: \"#eee\",\n    alignItems: \"center\",\n    textAlign: \"center\"\n  }\n}));\n\nconst InputSearch = props => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const matchesMD = useMediaQuery(theme.breakpoints.down(\"md\"));\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        countriesData = _useState2[0],\n        setCountries = _useState2[1];\n\n  useEffect(() => {\n    let url = process.env.REACT_APP_PROD_API_URL;\n    axios.get(\"\".concat(url, \"countries\"), {\n      headers: {\n        \"Access-Control-Allow-Origin\": \"*\"\n      }\n    }).then(res => {\n      if (res.status === 200) {\n        setCountries([...res.data]);\n      }\n    }).then(err => console.log(err));\n  }, []);\n\n  function colors(data) {\n    // eslint-disable-next-line no-unused-vars\n    let subjectColor = \"\";\n\n    if (data <= 30) {\n      return subjectColor = \"#58d68d\";\n    } else if (data > 30 && data < 80) {\n      return subjectColor = \"#FFC300\";\n    } else if (data > 80 && data < 130) {\n      return subjectColor = \"#FF5733\";\n    } else {\n      return subjectColor = \"#C70039\";\n    }\n  }\n\n  return React.createElement(Grid, {\n    item: true,\n    className: classes.autoContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(Autocomplete, {\n    id: \"corona-infected-countries-list\",\n    options: countriesData,\n    getOptionLabel: countryData => countryData.country,\n    style: {\n      width: matchesMD ? \"20em\" : \"30em\",\n      backgroundColor: \"#fff\",\n      paddingTop: matchesMD ? \"0.3\" : \"0.5em\",\n      paddingBottom: matchesMD ? \"0.8em\" : \"0\"\n    },\n    renderOption: countryData => React.createElement(Card, {\n      className: classes.cardContents,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(CardContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      variant: \"h5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"Country :\", \" \", React.createElement(\"span\", {\n      className: classes.textColor,\n      style: {\n        fontWeight: \"bold\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, countryData.country)), React.createElement(Typography, {\n      variant: \"h5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"Cases :\", \" \", React.createElement(\"span\", {\n      style: {\n        color: colors(countryData.cases),\n        fontWeight: \"bold\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, countryData.cases)), React.createElement(Typography, {\n      variant: \"h5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"Critical :\", \" \", React.createElement(\"span\", {\n      style: {\n        color: colors(countryData.critical),\n        fontWeight: \"bold\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, countryData.critical)), React.createElement(Typography, {\n      variant: \"h5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"Deaths :\", \" \", React.createElement(\"span\", {\n      style: {\n        color: colors(countryData.deaths),\n        fontWeight: \"bold\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, countryData.deaths)), React.createElement(Typography, {\n      variant: \"h5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"Recovered :\", \" \", React.createElement(\"span\", {\n      style: {\n        color: colors(countryData.recovered),\n        fontWeight: \"bold\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, countryData.recovered)), React.createElement(Typography, {\n      variant: \"h5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"Today's Cases :\", \" \", React.createElement(\"span\", {\n      style: {\n        color: colors(countryData.todayCases),\n        fontWeight: \"bold\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, countryData.todayCases)), React.createElement(Typography, {\n      variant: \"h5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, \"Today's Death :\", \" \", React.createElement(\"span\", {\n      style: {\n        color: colors(countryData.todayDeaths),\n        fontWeight: \"bold\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, countryData.todayDeaths)), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }))),\n    renderInput: params => React.createElement(TextField, Object.assign({}, params, {\n      label: \"Choose the Country you wanna check\",\n      variant: \"outlined\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }));\n};\n\nexport default InputSearch;","map":{"version":3,"sources":["/Users/simoncolman/Desktop/react-app/src/components/InputSearch.js"],"names":["React","useState","useEffect","Grid","Card","CardContent","axios","TextField","makeStyles","useTheme","useMediaQuery","Typography","Autocomplete","useStyles","theme","cardContents","background","textAlign","textColor","color","autoContainer","height","breakpoints","down","marginLeft","marginRight","backgroundColor","alignItems","InputSearch","props","classes","matchesMD","countriesData","setCountries","url","process","env","REACT_APP_PROD_API_URL","get","headers","then","res","status","data","err","console","log","colors","subjectColor","countryData","country","width","paddingTop","paddingBottom","fontWeight","cases","critical","deaths","recovered","todayCases","todayDeaths","params"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport axios from \"axios\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport { Typography } from \"@material-ui/core\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\n\nconst useStyles = makeStyles(theme => ({\n  cardContents: {\n    background: \"linear-gradient(to right, #ece9e6, #ffffff)\",\n    textAlign: \"center\"\n  },\n  textColor: {\n    color: \" #581845\"\n  },\n  autoContainer: {\n    height: \"4.6em\",\n    [theme.breakpoints.down(\"md\")]: {\n      height: \"4em\",\n      marginLeft: \"0.5em\",\n      marginRight: \"0.5em\"\n    },\n    backgroundColor: \"#eee\",\n    alignItems: \"center\",\n    textAlign: \"center\"\n  }\n}));\n\nconst InputSearch = props => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const matchesMD = useMediaQuery(theme.breakpoints.down(\"md\"));\n  const [countriesData, setCountries] = useState([]);\n\n  useEffect(() => {\n    let url = process.env.REACT_APP_PROD_API_URL;\n    axios\n      .get(`${url}countries`, {\n        headers: { \"Access-Control-Allow-Origin\": \"*\" }\n      })\n      .then(res => {\n        if (res.status === 200) {\n          setCountries([...res.data]);\n        }\n      })\n      .then(err => console.log(err));\n  }, []);\n\n  function colors(data) {\n    // eslint-disable-next-line no-unused-vars\n    let subjectColor = \"\";\n    if (data <= 30) {\n      return (subjectColor = \"#58d68d\");\n    } else if (data > 30 && data < 80) {\n      return (subjectColor = \"#FFC300\");\n    } else if (data > 80 && data < 130) {\n      return (subjectColor = \"#FF5733\");\n    } else {\n      return (subjectColor = \"#C70039\");\n    }\n  }\n  return (\n    <Grid item className={classes.autoContainer}>\n      <Autocomplete\n        id=\"corona-infected-countries-list\"\n        options={countriesData}\n        getOptionLabel={countryData => countryData.country}\n        style={{\n          width: matchesMD ? \"20em\" : \"30em\",\n          backgroundColor: \"#fff\",\n          paddingTop: matchesMD ? \"0.3\" : \"0.5em\",\n          paddingBottom: matchesMD ? \"0.8em\" : \"0\"\n        }}\n        renderOption={countryData => (\n          <Card className={classes.cardContents}>\n            <CardContent>\n              <Typography variant=\"h5\">\n                Country :{\" \"}\n                <span\n                  className={classes.textColor}\n                  style={{ fontWeight: \"bold\" }}\n                >\n                  {countryData.country}\n                </span>\n              </Typography>\n              <Typography variant=\"h5\">\n                Cases :{\" \"}\n                <span\n                  style={{\n                    color: colors(countryData.cases),\n                    fontWeight: \"bold\"\n                  }}\n                >\n                  {countryData.cases}\n                </span>\n              </Typography>\n              <Typography variant=\"h5\">\n                Critical :{\" \"}\n                <span\n                  style={{\n                    color: colors(countryData.critical),\n                    fontWeight: \"bold\"\n                  }}\n                >\n                  {countryData.critical}\n                </span>\n              </Typography>\n              <Typography variant=\"h5\">\n                Deaths :{\" \"}\n                <span\n                  style={{\n                    color: colors(countryData.deaths),\n                    fontWeight: \"bold\"\n                  }}\n                >\n                  {countryData.deaths}\n                </span>\n              </Typography>\n              <Typography variant=\"h5\">\n                Recovered :{\" \"}\n                <span\n                  style={{\n                    color: colors(countryData.recovered),\n                    fontWeight: \"bold\"\n                  }}\n                >\n                  {countryData.recovered}\n                </span>\n              </Typography>\n              <Typography variant=\"h5\">\n                Today's Cases :{\" \"}\n                <span\n                  style={{\n                    color: colors(countryData.todayCases),\n                    fontWeight: \"bold\"\n                  }}\n                >\n                  {countryData.todayCases}\n                </span>\n              </Typography>\n              <Typography variant=\"h5\">\n                Today's Death :{\" \"}\n                <span\n                  style={{\n                    color: colors(countryData.todayDeaths),\n                    fontWeight: \"bold\"\n                  }}\n                >\n                  {countryData.todayDeaths}\n                </span>\n              </Typography>\n              <br />\n            </CardContent>\n          </Card>\n        )}\n        renderInput={params => (\n          <TextField\n            {...params}\n            label=\"Choose the Country you wanna check\"\n            variant=\"outlined\"\n          />\n        )}\n      />\n    </Grid>\n  );\n};\n\nexport default InputSearch;\n"]},"metadata":{},"sourceType":"module"}